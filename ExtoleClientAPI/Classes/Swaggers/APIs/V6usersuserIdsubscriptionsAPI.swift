//
// V6usersuserIdsubscriptionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V6usersuserIdsubscriptionsAPI {
    /**
     create a subscription for a user

     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create4(userId: String, body: UserSubscriptionRequest? = nil, completion: @escaping ((_ data: UserSubscriptionResponse?,_ error: Error?) -> Void)) {
        create4WithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     create a subscription for a user
     - POST /v6/users/{user_id}/subscriptions
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "subscription_id" : "subscription_id",
  "filtering_level" : "ALL",
  "channels" : [ {
    "id" : "id",
    "type" : "SLACK"
  }, {
    "id" : "id",
    "type" : "SLACK"
  } ],
  "having_all_tags" : [ "having_all_tags", "having_all_tags" ]
}}]
     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserSubscriptionResponse> 
     */
    open class func create4WithRequestBuilder(userId: String, body: UserSubscriptionRequest? = nil) -> RequestBuilder<UserSubscriptionResponse> {
        var path = "/v6/users/{user_id}/subscriptions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserSubscriptionResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     deletes a particular subscription for a user

     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete2(userId: String, subscriptionId: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        delete2WithRequestBuilder(userId: userId, subscriptionId: subscriptionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deletes a particular subscription for a user
     - DELETE /v6/users/{user_id}/subscriptions/{subscription_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func delete2WithRequestBuilder(userId: String, subscriptionId: String) -> RequestBuilder<SuccessResponse> {
        var path = "/v6/users/{user_id}/subscriptions/{subscription_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let subscriptionIdPreEscape = "\(subscriptionId)"
        let subscriptionIdPostEscape = subscriptionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subscription_id}", with: subscriptionIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SuccessResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a particular subscription for a user

     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get2(userId: String, subscriptionId: String, completion: @escaping ((_ data: UserSubscriptionResponse?,_ error: Error?) -> Void)) {
        get2WithRequestBuilder(userId: userId, subscriptionId: subscriptionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a particular subscription for a user
     - GET /v6/users/{user_id}/subscriptions/{subscription_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "subscription_id" : "subscription_id",
  "filtering_level" : "ALL",
  "channels" : [ {
    "id" : "id",
    "type" : "SLACK"
  }, {
    "id" : "id",
    "type" : "SLACK"
  } ],
  "having_all_tags" : [ "having_all_tags", "having_all_tags" ]
}}]
     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  

     - returns: RequestBuilder<UserSubscriptionResponse> 
     */
    open class func get2WithRequestBuilder(userId: String, subscriptionId: String) -> RequestBuilder<UserSubscriptionResponse> {
        var path = "/v6/users/{user_id}/subscriptions/{subscription_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let subscriptionIdPreEscape = "\(subscriptionId)"
        let subscriptionIdPostEscape = subscriptionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subscription_id}", with: subscriptionIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserSubscriptionResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets subscriptions for a user

     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list1(userId: String, completion: @escaping ((_ data: [UserSubscriptionResponse]?,_ error: Error?) -> Void)) {
        list1WithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets subscriptions for a user
     - GET /v6/users/{user_id}/subscriptions
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "subscription_id" : "subscription_id",
  "filtering_level" : "ALL",
  "channels" : [ {
    "id" : "id",
    "type" : "SLACK"
  }, {
    "id" : "id",
    "type" : "SLACK"
  } ],
  "having_all_tags" : [ "having_all_tags", "having_all_tags" ]
}, {
  "subscription_id" : "subscription_id",
  "filtering_level" : "ALL",
  "channels" : [ {
    "id" : "id",
    "type" : "SLACK"
  }, {
    "id" : "id",
    "type" : "SLACK"
  } ],
  "having_all_tags" : [ "having_all_tags", "having_all_tags" ]
} ]}]
     - parameter userId: (path) The unique identifier of this user at Extole. 

     - returns: RequestBuilder<[UserSubscriptionResponse]> 
     */
    open class func list1WithRequestBuilder(userId: String) -> RequestBuilder<[UserSubscriptionResponse]> {
        var path = "/v6/users/{user_id}/subscriptions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[UserSubscriptionResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     create a subscription for a user

     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update2(userId: String, subscriptionId: String, body: UserSubscriptionUpdateRequest? = nil, completion: @escaping ((_ data: UserSubscriptionResponse?,_ error: Error?) -> Void)) {
        update2WithRequestBuilder(userId: userId, subscriptionId: subscriptionId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     create a subscription for a user
     - PUT /v6/users/{user_id}/subscriptions/{subscription_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "subscription_id" : "subscription_id",
  "filtering_level" : "ALL",
  "channels" : [ {
    "id" : "id",
    "type" : "SLACK"
  }, {
    "id" : "id",
    "type" : "SLACK"
  } ],
  "having_all_tags" : [ "having_all_tags", "having_all_tags" ]
}}]
     - parameter userId: (path) The unique identifier of this user at Extole. 
     - parameter subscriptionId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserSubscriptionResponse> 
     */
    open class func update2WithRequestBuilder(userId: String, subscriptionId: String, body: UserSubscriptionUpdateRequest? = nil) -> RequestBuilder<UserSubscriptionResponse> {
        var path = "/v6/users/{user_id}/subscriptions/{subscription_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let subscriptionIdPreEscape = "\(subscriptionId)"
        let subscriptionIdPostEscape = subscriptionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subscription_id}", with: subscriptionIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserSubscriptionResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
