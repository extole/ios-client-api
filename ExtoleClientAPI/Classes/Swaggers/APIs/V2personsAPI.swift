//
// V2personsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V2personsAPI {
    /**
     Get a list of persons

     - parameter email: (query)  (optional)
     - parameter partnerUserId: (query)  (optional)
     - parameter lastName: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter partnerId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(email: String? = nil, partnerUserId: String? = nil, lastName: String? = nil, limit: Int? = nil, offset: Int? = nil, partnerId: [String]? = nil, completion: @escaping ((_ data: [PersonV2Response]?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(email: email, partnerUserId: partnerUserId, lastName: lastName, limit: limit, offset: offset, partnerId: partnerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of persons
     - GET /v2/persons

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "picture_url" : "picture_url",
  "cookie_consent" : "cookie_consent",
  "cookie_consent_type" : "EXTOLE",
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "processing_consent" : "processing_consent",
  "processing_consent_type" : "EXTOLE",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "profile_blocks" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason"
  },
  "blocked" : true,
  "self_rewarding_blocked" : true,
  "friend_rewarding_blocked" : true,
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "first_name" : "first_name",
  "parameters" : {
    "key" : { }
  },
  "email" : "email"
}, {
  "picture_url" : "picture_url",
  "cookie_consent" : "cookie_consent",
  "cookie_consent_type" : "EXTOLE",
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "processing_consent" : "processing_consent",
  "processing_consent_type" : "EXTOLE",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "profile_blocks" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason"
  },
  "blocked" : true,
  "self_rewarding_blocked" : true,
  "friend_rewarding_blocked" : true,
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "first_name" : "first_name",
  "parameters" : {
    "key" : { }
  },
  "email" : "email"
} ]}]
     - parameter email: (query)  (optional)
     - parameter partnerUserId: (query)  (optional)
     - parameter lastName: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter partnerId: (query)  (optional)

     - returns: RequestBuilder<[PersonV2Response]> 
     */
    open class func callGetWithRequestBuilder(email: String? = nil, partnerUserId: String? = nil, lastName: String? = nil, limit: Int? = nil, offset: Int? = nil, partnerId: [String]? = nil) -> RequestBuilder<[PersonV2Response]> {
        let path = "/v2/persons"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "email": email, 
                        "partner_user_id": partnerUserId, 
                        "last_name": lastName, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "partner_id": partnerId
        ])


        let requestBuilder: RequestBuilder<[PersonV2Response]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a Person in the Extole Platform.

     - parameter body: (body) PersonRequest object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create2(body: PersonV2Request, completion: @escaping ((_ data: PersonV2Response?,_ error: Error?) -> Void)) {
        create2WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a Person in the Extole Platform.
     - POST /v2/persons

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "cookie_consent" : "cookie_consent",
  "cookie_consent_type" : "EXTOLE",
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "processing_consent" : "processing_consent",
  "processing_consent_type" : "EXTOLE",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "profile_blocks" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason"
  },
  "blocked" : true,
  "self_rewarding_blocked" : true,
  "friend_rewarding_blocked" : true,
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "first_name" : "first_name",
  "parameters" : {
    "key" : { }
  },
  "email" : "email"
}}]
     - parameter body: (body) PersonRequest object 

     - returns: RequestBuilder<PersonV2Response> 
     */
    open class func create2WithRequestBuilder(body: PersonV2Request) -> RequestBuilder<PersonV2Response> {
        let path = "/v2/persons"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonV2Response>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get a list with advocates

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssociatedAdvocates1(personId: String, completion: @escaping ((_ data: [RelationshipV2Response]?,_ error: Error?) -> Void)) {
        getAssociatedAdvocates1WithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with advocates
     - GET /v2/persons/{person_id}/advocates

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
}, {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[RelationshipV2Response]> 
     */
    open class func getAssociatedAdvocates1WithRequestBuilder(personId: String) -> RequestBuilder<[RelationshipV2Response]> {
        var path = "/v2/persons/{person_id}/advocates"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RelationshipV2Response]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with friends

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssociatedFriends1(personId: String, completion: @escaping ((_ data: [RelationshipV2Response]?,_ error: Error?) -> Void)) {
        getAssociatedFriends1WithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with friends
     - GET /v2/persons/{person_id}/friends

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
}, {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[RelationshipV2Response]> 
     */
    open class func getAssociatedFriends1WithRequestBuilder(personId: String) -> RequestBuilder<[RelationshipV2Response]> {
        var path = "/v2/persons/{person_id}/friends"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RelationshipV2Response]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets Details for a Person

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPerson1(personId: String, completion: @escaping ((_ data: PersonV2Response?,_ error: Error?) -> Void)) {
        getPerson1WithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets Details for a Person
     - GET /v2/persons/{person_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "cookie_consent" : "cookie_consent",
  "cookie_consent_type" : "EXTOLE",
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "processing_consent" : "processing_consent",
  "processing_consent_type" : "EXTOLE",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "profile_blocks" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason"
  },
  "blocked" : true,
  "self_rewarding_blocked" : true,
  "friend_rewarding_blocked" : true,
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "first_name" : "first_name",
  "parameters" : {
    "key" : { }
  },
  "email" : "email"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<PersonV2Response> 
     */
    open class func getPerson1WithRequestBuilder(personId: String) -> RequestBuilder<PersonV2Response> {
        var path = "/v2/persons/{person_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonV2Response>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with referrals

     - parameter personId: (path) personId to get referrals 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReferralsToPerson1(personId: String, completion: @escaping ((_ data: [RelationshipV2Response]?,_ error: Error?) -> Void)) {
        getReferralsToPerson1WithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with referrals
     - GET /v2/persons/{person_id}/referrals-to-person

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
}, {
  "container" : "container",
  "reason" : "reason",
  "shareable_id" : "shareable_id",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "person" : {
    "picture_url" : "picture_url",
    "cookie_consent" : "cookie_consent",
    "cookie_consent_type" : "EXTOLE",
    "request_contexts" : [ {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    }, {
      "country" : {
        "name" : "name",
        "iso_code" : "iso_code"
      },
      "device_id" : "device_id",
      "city" : {
        "name" : "name"
      },
      "ip" : "ip",
      "created_at" : "2000-01-23T04:56:07.000+00:00",
      "location" : {
        "latitude" : 0.8008281904610115,
        "longitude" : 6.027456183070403
      },
      "state" : {
        "name" : "name",
        "iso_code" : "iso_code"
      }
    } ],
    "last_name" : "last_name",
    "processing_consent" : "processing_consent",
    "processing_consent_type" : "EXTOLE",
    "locale" : {
      "last_browser" : "last_browser",
      "user_specified" : "user_specified"
    },
    "profile_blocks" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "reason" : "reason"
    },
    "blocked" : true,
    "self_rewarding_blocked" : true,
    "friend_rewarding_blocked" : true,
    "partner_user_id" : "partner_user_id",
    "id" : "id",
    "first_name" : "first_name",
    "parameters" : {
      "key" : { }
    },
    "email" : "email"
  }
} ]}]
     - parameter personId: (path) personId to get referrals 

     - returns: RequestBuilder<[RelationshipV2Response]> 
     */
    open class func getReferralsToPerson1WithRequestBuilder(personId: String) -> RequestBuilder<[RelationshipV2Response]> {
        var path = "/v2/persons/{person_id}/referrals-to-person"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RelationshipV2Response]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Check if is the same person

     - parameter firstPersonId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter personId: (query) The Extole unique profile identifier of this user at Extole. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func isSamePerson(firstPersonId: String, personId: String? = nil, completion: @escaping ((_ data: IsSamePersonV2Response?,_ error: Error?) -> Void)) {
        isSamePersonWithRequestBuilder(firstPersonId: firstPersonId, personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if is the same person
     - GET /v2/persons/{first_person_id}/is-same

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "is_same" : true
}}]
     - parameter firstPersonId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter personId: (query) The Extole unique profile identifier of this user at Extole. (optional)

     - returns: RequestBuilder<IsSamePersonV2Response> 
     */
    open class func isSamePersonWithRequestBuilder(firstPersonId: String, personId: String? = nil) -> RequestBuilder<IsSamePersonV2Response> {
        var path = "/v2/persons/{first_person_id}/is-same"
        let firstPersonIdPreEscape = "\(firstPersonId)"
        let firstPersonIdPostEscape = firstPersonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{first_person_id}", with: firstPersonIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "person_id": personId
        ])


        let requestBuilder: RequestBuilder<IsSamePersonV2Response>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates a person

     - parameter body: (body) PersonRequest object 
     - parameter personId: (path) Id for person to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: PersonV2Request, personId: String, completion: @escaping ((_ data: PersonV2Response?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a person
     - PUT /v2/persons/{person_id}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "cookie_consent" : "cookie_consent",
  "cookie_consent_type" : "EXTOLE",
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "processing_consent" : "processing_consent",
  "processing_consent_type" : "EXTOLE",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "profile_blocks" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "reason" : "reason"
  },
  "blocked" : true,
  "self_rewarding_blocked" : true,
  "friend_rewarding_blocked" : true,
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "first_name" : "first_name",
  "parameters" : {
    "key" : { }
  },
  "email" : "email"
}}]
     - parameter body: (body) PersonRequest object 
     - parameter personId: (path) Id for person to be updated 

     - returns: RequestBuilder<PersonV2Response> 
     */
    open class func updateWithRequestBuilder(body: PersonV2Request, personId: String) -> RequestBuilder<PersonV2Response> {
        var path = "/v2/persons/{person_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonV2Response>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
