//
// BuiltCampaignControllerTriggerHasPriorStepResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BuiltCampaignControllerTriggerHasPriorStepResponse: Codable {

    public enum TriggerType: String, Codable { 
        case share = "SHARE"
        case purchase = "PURCHASE"
        case event = "EVENT"
        case score = "SCORE"
        case zoneState = "ZONE_STATE"
        case apiVersion = "API_VERSION"
        case referredByEvent = "REFERRED_BY_EVENT"
        case legacyQuality = "LEGACY_QUALITY"
        case expression = "EXPRESSION"
        case access = "ACCESS"
        case dataIntelligenceEvent = "DATA_INTELLIGENCE_EVENT"
        case hasPriorStep = "HAS_PRIOR_STEP"
        case maxmind = "MAXMIND"
        case rewardEvent = "REWARD_EVENT"
        case hasPriorReward = "HAS_PRIOR_REWARD"
    }
    public enum TriggerPhase: String, Codable { 
        case matching = "MATCHING"
        case qualifying = "QUALIFYING"
        case quality = "QUALITY"
    }
    public enum FilterScope: String, Codable { 
        case client = "CLIENT"
        case program = "PROGRAM"
        case campaign = "CAMPAIGN"
        case attributed = "ATTRIBUTED"
    }
    public enum FilterMatchingPartnerEventId: String, Codable { 
        case disabled = "DISABLED"
        case matchAny = "MATCH_ANY"
    }
    public enum FilterQuality: String, Codable { 
        case any = "ANY"
        case high = "HIGH"
        case low = "LOW"
    }
    public var triggerId: String?
    public var triggerType: TriggerType?
    public var triggerPhase: TriggerPhase?
    public var triggerName: String?
    public var componentReferences: [CampaignComponentReferenceResponse]?
    public var filterNames: [String]?
    public var filterScope: FilterScope?
    public var filterPartnerEventIdName: String?
    public var filterPartnerEventIdValue: String?
    public var filterMatchingPartnerEventId: FilterMatchingPartnerEventId?
    public var filterMinAge: Int64?
    public var filterMaxAge: Int64?
    public var filterMinValue: Decimal?
    public var filterMaxValue: Decimal?
    public var filterQuality: FilterQuality?
    public var filterExpressions: [String]?
    public var filterProgramLabel: String?
    public var filterCampaignId: String?
    public var filterMinDate: Date?
    public var filterMaxDate: Date?
    public var sumOfValueMin: Decimal?
    public var sumOfValueMax: Decimal?
    public var countMin: Int?
    public var countMax: Int?
    public var countMatches: [Int]?

    public init(triggerId: String? = nil, triggerType: TriggerType? = nil, triggerPhase: TriggerPhase? = nil, triggerName: String? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil, filterNames: [String]? = nil, filterScope: FilterScope? = nil, filterPartnerEventIdName: String? = nil, filterPartnerEventIdValue: String? = nil, filterMatchingPartnerEventId: FilterMatchingPartnerEventId? = nil, filterMinAge: Int64? = nil, filterMaxAge: Int64? = nil, filterMinValue: Decimal? = nil, filterMaxValue: Decimal? = nil, filterQuality: FilterQuality? = nil, filterExpressions: [String]? = nil, filterProgramLabel: String? = nil, filterCampaignId: String? = nil, filterMinDate: Date? = nil, filterMaxDate: Date? = nil, sumOfValueMin: Decimal? = nil, sumOfValueMax: Decimal? = nil, countMin: Int? = nil, countMax: Int? = nil, countMatches: [Int]? = nil) {
        self.triggerId = triggerId
        self.triggerType = triggerType
        self.triggerPhase = triggerPhase
        self.triggerName = triggerName
        self.componentReferences = componentReferences
        self.filterNames = filterNames
        self.filterScope = filterScope
        self.filterPartnerEventIdName = filterPartnerEventIdName
        self.filterPartnerEventIdValue = filterPartnerEventIdValue
        self.filterMatchingPartnerEventId = filterMatchingPartnerEventId
        self.filterMinAge = filterMinAge
        self.filterMaxAge = filterMaxAge
        self.filterMinValue = filterMinValue
        self.filterMaxValue = filterMaxValue
        self.filterQuality = filterQuality
        self.filterExpressions = filterExpressions
        self.filterProgramLabel = filterProgramLabel
        self.filterCampaignId = filterCampaignId
        self.filterMinDate = filterMinDate
        self.filterMaxDate = filterMaxDate
        self.sumOfValueMin = sumOfValueMin
        self.sumOfValueMax = sumOfValueMax
        self.countMin = countMin
        self.countMax = countMax
        self.countMatches = countMatches
    }

    public enum CodingKeys: String, CodingKey { 
        case triggerId = "trigger_id"
        case triggerType = "trigger_type"
        case triggerPhase = "trigger_phase"
        case triggerName = "trigger_name"
        case componentReferences = "component_references"
        case filterNames = "filter_names"
        case filterScope = "filter_scope"
        case filterPartnerEventIdName = "filter_partner_event_id_name"
        case filterPartnerEventIdValue = "filter_partner_event_id_value"
        case filterMatchingPartnerEventId = "filter_matching_partner_event_id"
        case filterMinAge = "filter_min_age"
        case filterMaxAge = "filter_max_age"
        case filterMinValue = "filter_min_value"
        case filterMaxValue = "filter_max_value"
        case filterQuality = "filter_quality"
        case filterExpressions = "filter_expressions"
        case filterProgramLabel = "filter_program_label"
        case filterCampaignId = "filter_campaign_id"
        case filterMinDate = "filter_min_date"
        case filterMaxDate = "filter_max_date"
        case sumOfValueMin = "sum_of_value_min"
        case sumOfValueMax = "sum_of_value_max"
        case countMin = "count_min"
        case countMax = "count_max"
        case countMatches = "count_matches"
    }

}
