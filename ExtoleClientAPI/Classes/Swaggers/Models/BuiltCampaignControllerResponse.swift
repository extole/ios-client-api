//
// BuiltCampaignControllerResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BuiltCampaignControllerResponse: Codable {

    public enum EnabledOnStates: String, Codable { 
        case notLaunched = "NOT_LAUNCHED"
        case live = "LIVE"
        case paused = "PAUSED"
        case ended = "ENDED"
        case stopped = "STOPPED"
    }
    public enum ExperienceTypes: String, Codable { 
        case advocate = "ADVOCATE"
        case friend = "FRIEND"
    }
    public enum Selectors: String, Codable { 
        case bestReferral = "BEST_REFERRAL"
        case target = "TARGET"
        case matchingCampaign = "MATCHING_CAMPAIGN"
        case random = "RANDOM"
        case matchingReferralCampaign = "MATCHING_REFERRAL_CAMPAIGN"
    }
    public var controllerId: String?
    public var name: String?
    public var enabled: Bool?
    public var enabledOnStates: [EnabledOnStates]?
    public var experienceTypes: [ExperienceTypes]?
    public var selectors: [Selectors]?
    public var triggers: [BuiltCampaignControllerTriggerResponse]?
    public var actions: [BuiltCampaignControllerActionResponse]?
    public var aliases: [String]?
    public var partnerIdName: String?
    public var data: [StepDataResponse]?
    public var value: String?
    public var componentReferences: [CampaignComponentReferenceResponse]?

    public init(controllerId: String? = nil, name: String? = nil, enabled: Bool? = nil, enabledOnStates: [EnabledOnStates]? = nil, experienceTypes: [ExperienceTypes]? = nil, selectors: [Selectors]? = nil, triggers: [BuiltCampaignControllerTriggerResponse]? = nil, actions: [BuiltCampaignControllerActionResponse]? = nil, aliases: [String]? = nil, partnerIdName: String? = nil, data: [StepDataResponse]? = nil, value: String? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil) {
        self.controllerId = controllerId
        self.name = name
        self.enabled = enabled
        self.enabledOnStates = enabledOnStates
        self.experienceTypes = experienceTypes
        self.selectors = selectors
        self.triggers = triggers
        self.actions = actions
        self.aliases = aliases
        self.partnerIdName = partnerIdName
        self.data = data
        self.value = value
        self.componentReferences = componentReferences
    }

    public enum CodingKeys: String, CodingKey { 
        case controllerId = "controller_id"
        case name
        case enabled
        case enabledOnStates = "enabled_on_states"
        case experienceTypes = "experience_types"
        case selectors
        case triggers
        case actions
        case aliases
        case partnerIdName = "partner_id_name"
        case data
        case value
        case componentReferences = "component_references"
    }

}
