//
// PrehandlersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PrehandlersAPI {
    /**
     Create new prehandler

     - parameter body: (body) PrehandlerCreateRequest object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: PrehandlerCreateRequest, completion: @escaping ((_ data: PrehandlerResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new prehandler
     - POST /v6/prehandlers

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
}}]
     - parameter body: (body) PrehandlerCreateRequest object 

     - returns: RequestBuilder<PrehandlerResponse> 
     */
    open class func createWithRequestBuilder(body: PrehandlerCreateRequest) -> RequestBuilder<PrehandlerResponse> {
        let path = "/v6/prehandlers"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PrehandlerResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete prehandler

     - parameter prehandlerId: (path) The id of the prehandler to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(prehandlerId: String, completion: @escaping ((_ data: PrehandlerResponse?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(prehandlerId: prehandlerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete prehandler
     - DELETE /v6/prehandlers/{prehandlerId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
}}]
     - parameter prehandlerId: (path) The id of the prehandler to be deleted. 

     - returns: RequestBuilder<PrehandlerResponse> 
     */
    open class func deleteWithRequestBuilder(prehandlerId: String) -> RequestBuilder<PrehandlerResponse> {
        var path = "/v6/prehandlers/{prehandlerId}"
        let prehandlerIdPreEscape = "\(prehandlerId)"
        let prehandlerIdPostEscape = prehandlerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{prehandlerId}", with: prehandlerIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PrehandlerResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Retrieve a prehandler

     - parameter prehandlerId: (path) The id of the prehandler to be retrieved. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get(prehandlerId: String, completion: @escaping ((_ data: PrehandlerResponse?,_ error: Error?) -> Void)) {
        getWithRequestBuilder(prehandlerId: prehandlerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve a prehandler
     - GET /v6/prehandlers/{prehandlerId}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
}}]
     - parameter prehandlerId: (path) The id of the prehandler to be retrieved. 

     - returns: RequestBuilder<PrehandlerResponse> 
     */
    open class func getWithRequestBuilder(prehandlerId: String) -> RequestBuilder<PrehandlerResponse> {
        var path = "/v6/prehandlers/{prehandlerId}"
        let prehandlerIdPreEscape = "\(prehandlerId)"
        let prehandlerIdPostEscape = prehandlerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{prehandlerId}", with: prehandlerIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PrehandlerResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List existing prehandlers

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(completion: @escaping ((_ data: [PrehandlerResponse]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List existing prehandlers
     - GET /v6/prehandlers

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
}, {
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
} ]}]

     - returns: RequestBuilder<[PrehandlerResponse]> 
     */
    open class func listWithRequestBuilder() -> RequestBuilder<[PrehandlerResponse]> {
        let path = "/v6/prehandlers"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[PrehandlerResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update prehandler

     - parameter body: (body) PrehandlerUpdateRequest object 
     - parameter prehandlerId: (path) The id of the prehandler to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: PrehandlerUpdateRequest, prehandlerId: String, completion: @escaping ((_ data: PrehandlerResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, prehandlerId: prehandlerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update prehandler
     - PUT /v6/prehandlers/{prehandlerId}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00",
  "conditions" : [ "", "" ],
  "actions" : [ "", "" ],
  "enabled" : true,
  "order" : 0
}}]
     - parameter body: (body) PrehandlerUpdateRequest object 
     - parameter prehandlerId: (path) The id of the prehandler to be updated. 

     - returns: RequestBuilder<PrehandlerResponse> 
     */
    open class func updateWithRequestBuilder(body: PrehandlerUpdateRequest, prehandlerId: String) -> RequestBuilder<PrehandlerResponse> {
        var path = "/v6/prehandlers/{prehandlerId}"
        let prehandlerIdPreEscape = "\(prehandlerId)"
        let prehandlerIdPostEscape = prehandlerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{prehandlerId}", with: prehandlerIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PrehandlerResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
