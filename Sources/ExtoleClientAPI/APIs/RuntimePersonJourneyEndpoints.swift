//
// RuntimePersonJourneyEndpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RuntimePersonJourneyEndpoints {
    /**
     Get a journey

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter journeyId: (path) Journey id parameter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourney(personId: String, journeyId: String, completion: @escaping ((_ data: PersonJourneyResponse?,_ error: Error?) -> Void)) {
        getJourneyWithRequestBuilder(personId: personId, journeyId: journeyId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a journey
     - GET /v4/runtime-persons/{person_id}/journeys/{journey_id}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "container" : "container",
  "entry_source" : "entry_source",
  "entry_share_id" : "entry_share_id",
  "entry_referral_source" : "entry_referral_source",
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "entry_zone" : "entry_zone",
  "last_promotable_code" : "last_promotable_code",
  "last_advocate_code" : "last_advocate_code",
  "entry_reason" : "entry_reason",
  "last_advocate_partner_id" : "last_advocate_partner_id",
  "last_consumer_event_id" : "last_consumer_event_id",
  "entry_profile_id" : "entry_profile_id",
  "last_referral_reason" : "last_referral_reason",
  "id" : "id",
  "entry_coupon_code" : "entry_coupon_code",
  "journey_type" : "journey_type",
  "campaign_id" : "campaign_id",
  "last_profile_id" : "last_profile_id",
  "last_coupon_code" : "last_coupon_code",
  "entry_promotable_code" : "entry_promotable_code",
  "entry_consumer_event_id" : "entry_consumer_event_id",
  "last_referral_source" : "last_referral_source",
  "last_channel" : "last_channel",
  "last_share_id" : "last_share_id",
  "last_source" : "last_source",
  "entry_shareable_id" : "entry_shareable_id",
  "entry_referral_reason" : "entry_referral_reason",
  "entry_advocate_partner_id" : "entry_advocate_partner_id",
  "last_zone" : "last_zone",
  "entry_advocate_code" : "entry_advocate_code",
  "entry_label" : "entry_label",
  "entry_channel" : "entry_channel",
  "last_shareable_id" : "last_shareable_id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter journeyId: (path) Journey id parameter. 

     - returns: RequestBuilder<PersonJourneyResponse> 
     */
    open class func getJourneyWithRequestBuilder(personId: String, journeyId: String) -> RequestBuilder<PersonJourneyResponse> {
        var path = "/v4/runtime-persons/{person_id}/journeys/{journey_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let journeyIdPreEscape = "\(journeyId)"
        let journeyIdPostEscape = journeyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{journey_id}", with: journeyIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonJourneyResponse>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with journeys

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter type: (query) Optional journey type filter, one of friend or advocate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneys(personId: String, container: String? = nil, type: String? = nil, completion: @escaping ((_ data: [PersonJourneyResponse]?,_ error: Error?) -> Void)) {
        getJourneysWithRequestBuilder(personId: personId, container: container, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with journeys
     - GET /v4/runtime-persons/{person_id}/journeys

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "entry_source" : "entry_source",
  "entry_share_id" : "entry_share_id",
  "entry_referral_source" : "entry_referral_source",
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "entry_zone" : "entry_zone",
  "last_promotable_code" : "last_promotable_code",
  "last_advocate_code" : "last_advocate_code",
  "entry_reason" : "entry_reason",
  "last_advocate_partner_id" : "last_advocate_partner_id",
  "last_consumer_event_id" : "last_consumer_event_id",
  "entry_profile_id" : "entry_profile_id",
  "last_referral_reason" : "last_referral_reason",
  "id" : "id",
  "entry_coupon_code" : "entry_coupon_code",
  "journey_type" : "journey_type",
  "campaign_id" : "campaign_id",
  "last_profile_id" : "last_profile_id",
  "last_coupon_code" : "last_coupon_code",
  "entry_promotable_code" : "entry_promotable_code",
  "entry_consumer_event_id" : "entry_consumer_event_id",
  "last_referral_source" : "last_referral_source",
  "last_channel" : "last_channel",
  "last_share_id" : "last_share_id",
  "last_source" : "last_source",
  "entry_shareable_id" : "entry_shareable_id",
  "entry_referral_reason" : "entry_referral_reason",
  "entry_advocate_partner_id" : "entry_advocate_partner_id",
  "last_zone" : "last_zone",
  "entry_advocate_code" : "entry_advocate_code",
  "entry_label" : "entry_label",
  "entry_channel" : "entry_channel",
  "last_shareable_id" : "last_shareable_id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "container" : "container",
  "entry_source" : "entry_source",
  "entry_share_id" : "entry_share_id",
  "entry_referral_source" : "entry_referral_source",
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "entry_zone" : "entry_zone",
  "last_promotable_code" : "last_promotable_code",
  "last_advocate_code" : "last_advocate_code",
  "entry_reason" : "entry_reason",
  "last_advocate_partner_id" : "last_advocate_partner_id",
  "last_consumer_event_id" : "last_consumer_event_id",
  "entry_profile_id" : "entry_profile_id",
  "last_referral_reason" : "last_referral_reason",
  "id" : "id",
  "entry_coupon_code" : "entry_coupon_code",
  "journey_type" : "journey_type",
  "campaign_id" : "campaign_id",
  "last_profile_id" : "last_profile_id",
  "last_coupon_code" : "last_coupon_code",
  "entry_promotable_code" : "entry_promotable_code",
  "entry_consumer_event_id" : "entry_consumer_event_id",
  "last_referral_source" : "last_referral_source",
  "last_channel" : "last_channel",
  "last_share_id" : "last_share_id",
  "last_source" : "last_source",
  "entry_shareable_id" : "entry_shareable_id",
  "entry_referral_reason" : "entry_referral_reason",
  "entry_advocate_partner_id" : "entry_advocate_partner_id",
  "last_zone" : "last_zone",
  "entry_advocate_code" : "entry_advocate_code",
  "entry_label" : "entry_label",
  "entry_channel" : "entry_channel",
  "last_shareable_id" : "last_shareable_id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter type: (query) Optional journey type filter, one of friend or advocate. (optional)

     - returns: RequestBuilder<[PersonJourneyResponse]> 
     */
    open class func getJourneysWithRequestBuilder(personId: String, container: String? = nil, type: String? = nil) -> RequestBuilder<[PersonJourneyResponse]> {
        var path = "/v4/runtime-persons/{person_id}/journeys"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "container": container, 
                        "type": type
        ])


        let requestBuilder: RequestBuilder<[PersonJourneyResponse]>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
