//
// WebhookEndpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WebhookEndpoints {
    /**
     Delete webhook

     - parameter webhookId: (path) The id of the webhook to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveWebhook(webhookId: String, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        archiveWebhookWithRequestBuilder(webhookId: webhookId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete webhook
     - DELETE /v6/webhooks/{webhook_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter webhookId: (path) The id of the webhook to be deleted. 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func archiveWebhookWithRequestBuilder(webhookId: String) -> RequestBuilder<WebhookResponse> {
        var path = "/v6/webhooks/{webhook_id}"
        let webhookIdPreEscape = "\(webhookId)"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhook_id}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create webhook

     - parameter body: (body) WebhookCreateRequest object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createWebhook(body: WebhookCreateRequest, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        createWebhookWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create webhook
     - POST /v6/webhooks
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body) WebhookCreateRequest object 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func createWebhookWithRequestBuilder(body: WebhookCreateRequest) -> RequestBuilder<WebhookResponse> {
        let path = "/v6/webhooks"
        let URLString = ExtoleClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get webhook

     - parameter webhookId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebhook(webhookId: String, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        getWebhookWithRequestBuilder(webhookId: webhookId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get webhook
     - GET /v6/webhooks/{webhook_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter webhookId: (path)  

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func getWebhookWithRequestBuilder(webhookId: String) -> RequestBuilder<WebhookResponse> {
        var path = "/v6/webhooks/{webhook_id}"
        let webhookIdPreEscape = "\(webhookId)"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhook_id}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter type
     */
    public enum ModelType_listWebhooks: String { 
        case reward = "REWARD"
        case generic = "GENERIC"
    }

    /**
     List webhooks

     - parameter enabled: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listWebhooks(enabled: Bool? = nil, type: ModelType_listWebhooks? = nil, completion: @escaping ((_ data: [WebhookResponse]?,_ error: Error?) -> Void)) {
        listWebhooksWithRequestBuilder(enabled: enabled, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List webhooks
     - GET /v6/webhooks
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}, {
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
} ]}]
     - parameter enabled: (query)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<[WebhookResponse]> 
     */
    open class func listWebhooksWithRequestBuilder(enabled: Bool? = nil, type: ModelType_listWebhooks? = nil) -> RequestBuilder<[WebhookResponse]> {
        let path = "/v6/webhooks"
        let URLString = ExtoleClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "enabled": enabled, 
                        "type": type?.rawValue
        ])


        let requestBuilder: RequestBuilder<[WebhookResponse]>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update webhook

     - parameter body: (body) WebhookUpdateRequest object 
     - parameter webhookId: (path) The id of the webhook to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateWebhook(body: WebhookUpdateRequest, webhookId: String, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        updateWebhookWithRequestBuilder(body: body, webhookId: webhookId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update webhook
     - PUT /v6/webhooks/{webhook_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body) WebhookUpdateRequest object 
     - parameter webhookId: (path) The id of the webhook to be updated. 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func updateWebhookWithRequestBuilder(body: WebhookUpdateRequest, webhookId: String) -> RequestBuilder<WebhookResponse> {
        var path = "/v6/webhooks/{webhook_id}"
        let webhookIdPreEscape = "\(webhookId)"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhook_id}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
