//
// V4tokensAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V4tokensAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: AccessTokenCreationRequest? = nil, completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v4/tokens

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "expires_in" : 0,
  "client_id" : "client_id",
  "person_id" : "person_id"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func createWithRequestBuilder(body: AccessTokenCreationRequest? = nil) -> RequestBuilder<AccessTokenResponse> {
        let path = "/v4/tokens"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter token: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(token: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v4/tokens/{token}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter token: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(token: String) -> RequestBuilder<Void> {
        var path = "/v4/tokens/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter token: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchange(token: String, completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        exchangeWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /v4/tokens/exchange/{token}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "expires_in" : 0,
  "client_id" : "client_id",
  "person_id" : "person_id"
}}]
     - parameter token: (path)  

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func exchangeWithRequestBuilder(token: String) -> RequestBuilder<AccessTokenResponse> {
        var path = "/v4/tokens/exchange/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get(completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        getWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v4/tokens

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "expires_in" : 0,
  "client_id" : "client_id",
  "person_id" : "person_id"
}}]

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func getWithRequestBuilder() -> RequestBuilder<AccessTokenResponse> {
        let path = "/v4/tokens"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter X_CSRF_TOKEN: (header)  (optional)
     - parameter X_NONCE: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validate(body: AuthCodeResponseValidateRequest, X_CSRF_TOKEN: String? = nil, X_NONCE: String? = nil, completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        validateWithRequestBuilder(body: body, X_CSRF_TOKEN: X_CSRF_TOKEN, X_NONCE: X_NONCE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v4/tokens/openid-connect/authorization-code-flow

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "expires_in" : 0,
  "client_id" : "client_id",
  "person_id" : "person_id"
}}]
     - parameter body: (body)  
     - parameter X_CSRF_TOKEN: (header)  (optional)
     - parameter X_NONCE: (header)  (optional)

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func validateWithRequestBuilder(body: AuthCodeResponseValidateRequest, X_CSRF_TOKEN: String? = nil, X_NONCE: String? = nil) -> RequestBuilder<AccessTokenResponse> {
        let path = "/v4/tokens/openid-connect/authorization-code-flow"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "X-CSRF-TOKEN": X_CSRF_TOKEN,
                        "X-NONCE": X_NONCE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
