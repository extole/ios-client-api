//
// RuntimePersonsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RuntimePersonsAPI {
    /**
     Creates a Person in the Extole Platform.

     - parameter body: (body) PersonRequest object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: PersonRequest, completion: @escaping ((_ data: PersonResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a Person in the Extole Platform.
     - POST /v4/runtime-persons

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
}}]
     - parameter body: (body) PersonRequest object 

     - returns: RequestBuilder<PersonResponse> 
     */
    open class func createWithRequestBuilder(body: PersonRequest) -> RequestBuilder<PersonResponse> {
        let path = "/v4/runtime-persons"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get a list of persons

     - parameter email: (query)  (optional)
     - parameter partnerUserId: (query)  (optional)
     - parameter lastName: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter partnerId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get(email: String? = nil, partnerUserId: String? = nil, lastName: String? = nil, limit: Int? = nil, offset: Int? = nil, partnerId: [String]? = nil, completion: @escaping ((_ data: [PersonResponse]?,_ error: Error?) -> Void)) {
        getWithRequestBuilder(email: email, partnerUserId: partnerUserId, lastName: lastName, limit: limit, offset: offset, partnerId: partnerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of persons
     - GET /v4/runtime-persons

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
}, {
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
} ]}]
     - parameter email: (query)  (optional)
     - parameter partnerUserId: (query)  (optional)
     - parameter lastName: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter partnerId: (query)  (optional)

     - returns: RequestBuilder<[PersonResponse]> 
     */
    open class func getWithRequestBuilder(email: String? = nil, partnerUserId: String? = nil, lastName: String? = nil, limit: Int? = nil, offset: Int? = nil, partnerId: [String]? = nil) -> RequestBuilder<[PersonResponse]> {
        let path = "/v4/runtime-persons"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "email": email, 
                        "partner_user_id": partnerUserId, 
                        "last_name": lastName, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "partner_id": partnerId
        ])


        let requestBuilder: RequestBuilder<[PersonResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets Details for a Person

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPerson(personId: String, completion: @escaping ((_ data: PersonResponse?,_ error: Error?) -> Void)) {
        getPersonWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets Details for a Person
     - GET /v4/runtime-persons/{person_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<PersonResponse> 
     */
    open class func getPersonWithRequestBuilder(personId: String) -> RequestBuilder<PersonResponse> {
        var path = "/v4/runtime-persons/{person_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with relationships

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter role: (query) Optional role of the other person in the relationship, friend or advocate. (optional)
     - parameter excludeAnonymous: (query) Optional flag to exclude relationships with anonymous persons. (optional)
     - parameter includeDuplicateIdentities: (query) Optional flag to return all relationships, not de-duplicate by identity. Default behavior (or when flag is set to false) returns last relationship per person. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRelationships(personId: String, role: String? = nil, excludeAnonymous: Bool? = nil, includeDuplicateIdentities: Bool? = nil, completion: @escaping ((_ data: [PersonRelationshipResponse]?,_ error: Error?) -> Void)) {
        getRelationshipsWithRequestBuilder(personId: personId, role: role, excludeAnonymous: excludeAnonymous, includeDuplicateIdentities: includeDuplicateIdentities).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with relationships
     - GET /v4/runtime-persons/{person_id}/relationships

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "other_person_id" : "other_person_id",
  "reason" : "reason",
  "role" : "role",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "data" : {
    "key" : "data"
  },
  "is_parent" : true
}, {
  "container" : "container",
  "other_person_id" : "other_person_id",
  "reason" : "reason",
  "role" : "role",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "data" : {
    "key" : "data"
  },
  "is_parent" : true
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter role: (query) Optional role of the other person in the relationship, friend or advocate. (optional)
     - parameter excludeAnonymous: (query) Optional flag to exclude relationships with anonymous persons. (optional)
     - parameter includeDuplicateIdentities: (query) Optional flag to return all relationships, not de-duplicate by identity. Default behavior (or when flag is set to false) returns last relationship per person. (optional, default to false)

     - returns: RequestBuilder<[PersonRelationshipResponse]> 
     */
    open class func getRelationshipsWithRequestBuilder(personId: String, role: String? = nil, excludeAnonymous: Bool? = nil, includeDuplicateIdentities: Bool? = nil) -> RequestBuilder<[PersonRelationshipResponse]> {
        var path = "/v4/runtime-persons/{person_id}/relationships"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "role": role, 
                        "exclude_anonymous": excludeAnonymous, 
                        "include_duplicate_identities": includeDuplicateIdentities
        ])


        let requestBuilder: RequestBuilder<[PersonRelationshipResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with request contexts

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequestContexts(personId: String, completion: @escaping ((_ data: [RequestContextResponse]?,_ error: Error?) -> Void)) {
        getRequestContextsWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with request contexts
     - GET /v4/runtime-persons/{person_id}/request-contexts

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "country" : {
    "name" : "name",
    "iso_code" : "iso_code"
  },
  "device_id" : "device_id",
  "city" : {
    "name" : "name"
  },
  "ip" : "ip",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "location" : {
    "latitude" : 0.8008281904610115,
    "longitude" : 6.027456183070403
  },
  "state" : {
    "name" : "name",
    "iso_code" : "iso_code"
  }
}, {
  "country" : {
    "name" : "name",
    "iso_code" : "iso_code"
  },
  "device_id" : "device_id",
  "city" : {
    "name" : "name"
  },
  "ip" : "ip",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "location" : {
    "latitude" : 0.8008281904610115,
    "longitude" : 6.027456183070403
  },
  "state" : {
    "name" : "name",
    "iso_code" : "iso_code"
  }
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[RequestContextResponse]> 
     */
    open class func getRequestContextsWithRequestBuilder(personId: String) -> RequestBuilder<[RequestContextResponse]> {
        var path = "/v4/runtime-persons/{person_id}/request-contexts"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RequestContextResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a shareable

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter code: (path) Shareable code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShareableByCode(personId: String, code: String, completion: @escaping ((_ data: PersonShareableResponse?,_ error: Error?) -> Void)) {
        getShareableByCodeWithRequestBuilder(personId: personId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a shareable
     - GET /v4/runtime-persons/{person_id}/shareables/{code}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter code: (path) Shareable code 

     - returns: RequestBuilder<PersonShareableResponse> 
     */
    open class func getShareableByCodeWithRequestBuilder(personId: String, code: String) -> RequestBuilder<PersonShareableResponse> {
        var path = "/v4/runtime-persons/{person_id}/shareables/{code}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonShareableResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with shareables

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShareables(personId: String, completion: @escaping ((_ data: [PersonShareableResponse]?,_ error: Error?) -> Void)) {
        getShareablesWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with shareables
     - GET /v4/runtime-persons/{person_id}/shareables

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
}, {
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[PersonShareableResponse]> 
     */
    open class func getShareablesWithRequestBuilder(personId: String) -> RequestBuilder<[PersonShareableResponse]> {
        var path = "/v4/runtime-persons/{person_id}/shareables"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[PersonShareableResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Check if is the same person

     - parameter firstPersonId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter personId: (query) The Extole unique profile identifier of this user at Extole. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func isSamePerson(firstPersonId: String, personId: String? = nil, completion: @escaping ((_ data: IsSamePersonResponse?,_ error: Error?) -> Void)) {
        isSamePersonWithRequestBuilder(firstPersonId: firstPersonId, personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if is the same person
     - GET /v4/runtime-persons/{first_person_id}/is-same

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "is_same" : true
}}]
     - parameter firstPersonId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter personId: (query) The Extole unique profile identifier of this user at Extole. (optional)

     - returns: RequestBuilder<IsSamePersonResponse> 
     */
    open class func isSamePersonWithRequestBuilder(firstPersonId: String, personId: String? = nil) -> RequestBuilder<IsSamePersonResponse> {
        var path = "/v4/runtime-persons/{first_person_id}/is-same"
        let firstPersonIdPreEscape = "\(firstPersonId)"
        let firstPersonIdPostEscape = firstPersonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{first_person_id}", with: firstPersonIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "person_id": personId
        ])


        let requestBuilder: RequestBuilder<IsSamePersonResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates a person

     - parameter body: (body) PersonRequest object 
     - parameter personId: (path) Id for person to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: PersonRequest, personId: String, completion: @escaping ((_ data: PersonResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a person
     - PUT /v4/runtime-persons/{person_id}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
}}]
     - parameter body: (body) PersonRequest object 
     - parameter personId: (path) Id for person to be updated 

     - returns: RequestBuilder<PersonResponse> 
     */
    open class func updateWithRequestBuilder(body: PersonRequest, personId: String) -> RequestBuilder<PersonResponse> {
        var path = "/v4/runtime-persons/{person_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
