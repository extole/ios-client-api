//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Delete webhook

     - parameter webhookId: (path) The id of the webhook to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveWebhook1(webhookId: String, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        archiveWebhook1WithRequestBuilder(webhookId: webhookId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete webhook
     - DELETE /v6/webhooks/{webhook_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter webhookId: (path) The id of the webhook to be deleted. 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func archiveWebhook1WithRequestBuilder(webhookId: String) -> RequestBuilder<WebhookResponse> {
        var path = "/v6/webhooks/{webhook_id}"
        let webhookIdPreEscape = "\(webhookId)"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhook_id}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create webhook

     - parameter body: (body) WebhookCreateRequest object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createWebhook1(body: WebhookCreateRequest, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        createWebhook1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create webhook
     - POST /v6/webhooks
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body) WebhookCreateRequest object 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func createWebhook1WithRequestBuilder(body: WebhookCreateRequest) -> RequestBuilder<WebhookResponse> {
        let path = "/v6/webhooks"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update webhook

     - parameter body: (body) WebhookUpdateRequest object 
     - parameter webhookId: (path) The id of the webhook to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateWebhook1(body: WebhookUpdateRequest, webhookId: String, completion: @escaping ((_ data: WebhookResponse?,_ error: Error?) -> Void)) {
        updateWebhook1WithRequestBuilder(body: body, webhookId: webhookId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update webhook
     - PUT /v6/webhooks/{webhook_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "request" : "request",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "REWARD",
  "client_key_id" : "client_key_id",
  "url" : "url",
  "enabled" : true,
  "default_method" : "default_method",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body) WebhookUpdateRequest object 
     - parameter webhookId: (path) The id of the webhook to be updated. 

     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func updateWebhook1WithRequestBuilder(body: WebhookUpdateRequest, webhookId: String) -> RequestBuilder<WebhookResponse> {
        var path = "/v6/webhooks/{webhook_id}"
        let webhookIdPreEscape = "\(webhookId)"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhook_id}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WebhookResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
