//
// V4personsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V4personsAPI {
    /**
     * enum for parameter scope
     */
    public enum Scope_getData: String { 
        case _public = "PUBLIC"
        case _private = "PRIVATE"
        case client = "CLIENT"
    }

    /**
     Get a list with profile data

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query) Optional filter for data name (optional)
     - parameter scope: (query) Optional filter for data scope, one of PUBLIC, PRIVATE (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getData(personId: String, name: String? = nil, scope: Scope_getData? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonDataResponse]?,_ error: Error?) -> Void)) {
        getDataWithRequestBuilder(personId: personId, name: name, scope: scope, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with profile data
     - GET /v4/persons/{person_id}/data

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "scope" : "PUBLIC",
  "name" : "name",
  "value" : { }
}, {
  "scope" : "PUBLIC",
  "name" : "name",
  "value" : { }
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query) Optional filter for data name (optional)
     - parameter scope: (query) Optional filter for data scope, one of PUBLIC, PRIVATE (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)

     - returns: RequestBuilder<[PersonDataResponse]> 
     */
    open class func getDataWithRequestBuilder(personId: String, name: String? = nil, scope: Scope_getData? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonDataResponse]> {
        var path = "/v4/persons/{person_id}/data"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "scope": scope?.rawValue, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonDataResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with journeys

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter programLabel: (query) Optional program label filter. (optional)
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter type: (query) Optional journey type filter, one of friend or advocate. (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneys(personId: String, campaignId: String? = nil, programLabel: String? = nil, container: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonJourneyResponse]?,_ error: Error?) -> Void)) {
        getJourneysWithRequestBuilder(personId: personId, campaignId: campaignId, programLabel: programLabel, container: container, type: type, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with journeys
     - GET /v4/persons/{person_id}/journeys

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "entry_source" : "entry_source",
  "entry_share_id" : "entry_share_id",
  "entry_referral_source" : "entry_referral_source",
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "entry_zone" : "entry_zone",
  "last_promotable_code" : "last_promotable_code",
  "last_advocate_code" : "last_advocate_code",
  "entry_reason" : "entry_reason",
  "last_advocate_partner_id" : "last_advocate_partner_id",
  "last_consumer_event_id" : "last_consumer_event_id",
  "entry_profile_id" : "entry_profile_id",
  "last_referral_reason" : "last_referral_reason",
  "id" : "id",
  "entry_coupon_code" : "entry_coupon_code",
  "journey_type" : "journey_type",
  "campaign_id" : "campaign_id",
  "last_profile_id" : "last_profile_id",
  "last_coupon_code" : "last_coupon_code",
  "entry_promotable_code" : "entry_promotable_code",
  "entry_consumer_event_id" : "entry_consumer_event_id",
  "last_referral_source" : "last_referral_source",
  "last_channel" : "last_channel",
  "last_share_id" : "last_share_id",
  "last_source" : "last_source",
  "entry_shareable_id" : "entry_shareable_id",
  "entry_referral_reason" : "entry_referral_reason",
  "entry_advocate_partner_id" : "entry_advocate_partner_id",
  "last_zone" : "last_zone",
  "entry_advocate_code" : "entry_advocate_code",
  "entry_label" : "entry_label",
  "entry_channel" : "entry_channel",
  "last_shareable_id" : "last_shareable_id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "container" : "container",
  "entry_source" : "entry_source",
  "entry_share_id" : "entry_share_id",
  "entry_referral_source" : "entry_referral_source",
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "entry_zone" : "entry_zone",
  "last_promotable_code" : "last_promotable_code",
  "last_advocate_code" : "last_advocate_code",
  "entry_reason" : "entry_reason",
  "last_advocate_partner_id" : "last_advocate_partner_id",
  "last_consumer_event_id" : "last_consumer_event_id",
  "entry_profile_id" : "entry_profile_id",
  "last_referral_reason" : "last_referral_reason",
  "id" : "id",
  "entry_coupon_code" : "entry_coupon_code",
  "journey_type" : "journey_type",
  "campaign_id" : "campaign_id",
  "last_profile_id" : "last_profile_id",
  "last_coupon_code" : "last_coupon_code",
  "entry_promotable_code" : "entry_promotable_code",
  "entry_consumer_event_id" : "entry_consumer_event_id",
  "last_referral_source" : "last_referral_source",
  "last_channel" : "last_channel",
  "last_share_id" : "last_share_id",
  "last_source" : "last_source",
  "entry_shareable_id" : "entry_shareable_id",
  "entry_referral_reason" : "entry_referral_reason",
  "entry_advocate_partner_id" : "entry_advocate_partner_id",
  "last_zone" : "last_zone",
  "entry_advocate_code" : "entry_advocate_code",
  "entry_label" : "entry_label",
  "entry_channel" : "entry_channel",
  "last_shareable_id" : "last_shareable_id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "updated_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter programLabel: (query) Optional program label filter. (optional)
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter type: (query) Optional journey type filter, one of friend or advocate. (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)

     - returns: RequestBuilder<[PersonJourneyResponse]> 
     */
    open class func getJourneysWithRequestBuilder(personId: String, campaignId: String? = nil, programLabel: String? = nil, container: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonJourneyResponse]> {
        var path = "/v4/persons/{person_id}/journeys"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "campaign_id": campaignId, 
                        "program_label": programLabel, 
                        "container": container, 
                        "type": type, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonJourneyResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets calculated statistics for the network of a Person

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter excludeAnonymous: (query) Optional flag to exclude relationships with anonymous persons. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNetworkStats(personId: String, container: String? = nil, excludeAnonymous: Bool? = nil, completion: @escaping ((_ data: PersonNetworkStatsResponse?,_ error: Error?) -> Void)) {
        getNetworkStatsWithRequestBuilder(personId: personId, container: container, excludeAnonymous: excludeAnonymous).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets calculated statistics for the network of a Person
     - GET /v4/persons/{person_id}/network-stats
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "conversions" : 1,
  "activities" : 0,
  "aov" : "aov",
  "transactions" : 6,
  "ltv" : "ltv"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter excludeAnonymous: (query) Optional flag to exclude relationships with anonymous persons. (optional)

     - returns: RequestBuilder<PersonNetworkStatsResponse> 
     */
    open class func getNetworkStatsWithRequestBuilder(personId: String, container: String? = nil, excludeAnonymous: Bool? = nil) -> RequestBuilder<PersonNetworkStatsResponse> {
        var path = "/v4/persons/{person_id}/network-stats"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "container": container, 
                        "exclude_anonymous": excludeAnonymous
        ])


        let requestBuilder: RequestBuilder<PersonNetworkStatsResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets Details for a Person

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPerson(personId: String, completion: @escaping ((_ data: PersonResponse?,_ error: Error?) -> Void)) {
        getPersonWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets Details for a Person
     - GET /v4/persons/{person_id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "picture_url" : "picture_url",
  "blocked" : true,
  "request_contexts" : [ {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  }, {
    "country" : {
      "name" : "name",
      "iso_code" : "iso_code"
    },
    "device_id" : "device_id",
    "city" : {
      "name" : "name"
    },
    "ip" : "ip",
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "location" : {
      "latitude" : 0.8008281904610115,
      "longitude" : 6.027456183070403
    },
    "state" : {
      "name" : "name",
      "iso_code" : "iso_code"
    }
  } ],
  "last_name" : "last_name",
  "partner_user_id" : "partner_user_id",
  "id" : "id",
  "locale" : {
    "last_browser" : "last_browser",
    "user_specified" : "user_specified"
  },
  "first_name" : "first_name",
  "version" : "version",
  "email" : "email"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<PersonResponse> 
     */
    open class func getPersonWithRequestBuilder(personId: String) -> RequestBuilder<PersonResponse> {
        var path = "/v4/persons/{person_id}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter role
     */
    public enum Role_getRelationships: String { 
        case friend = "FRIEND"
        case advocate = "ADVOCATE"
    }

    /**
     Get a list with relationships

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter excludeAnonymous: (query)  (optional)
     - parameter includeDuplicateIdentities: (query)  (optional)
     - parameter includeSelfReferrals: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRelationships(personId: String, container: String? = nil, role: Role_getRelationships? = nil, excludeAnonymous: Bool? = nil, includeDuplicateIdentities: Bool? = nil, includeSelfReferrals: Bool? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonRelationshipResponse]?,_ error: Error?) -> Void)) {
        getRelationshipsWithRequestBuilder(personId: personId, container: container, role: role, excludeAnonymous: excludeAnonymous, includeDuplicateIdentities: includeDuplicateIdentities, includeSelfReferrals: includeSelfReferrals, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with relationships
     - GET /v4/persons/{person_id}/relationships

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "other_person_id" : "other_person_id",
  "reason" : "reason",
  "role" : "role",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "data" : {
    "key" : "data"
  },
  "is_parent" : true
}, {
  "container" : "container",
  "other_person_id" : "other_person_id",
  "reason" : "reason",
  "role" : "role",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "data" : {
    "key" : "data"
  },
  "is_parent" : true
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter excludeAnonymous: (query)  (optional)
     - parameter includeDuplicateIdentities: (query)  (optional)
     - parameter includeSelfReferrals: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[PersonRelationshipResponse]> 
     */
    open class func getRelationshipsWithRequestBuilder(personId: String, container: String? = nil, role: Role_getRelationships? = nil, excludeAnonymous: Bool? = nil, includeDuplicateIdentities: Bool? = nil, includeSelfReferrals: Bool? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonRelationshipResponse]> {
        var path = "/v4/persons/{person_id}/relationships"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "container": container, 
                        "role": role?.rawValue, 
                        "exclude_anonymous": excludeAnonymous, 
                        "include_duplicate_identities": includeDuplicateIdentities, 
                        "include_self_referrals": includeSelfReferrals, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonRelationshipResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with request contexts

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequestContexts(personId: String, completion: @escaping ((_ data: [RequestContextResponse]?,_ error: Error?) -> Void)) {
        getRequestContextsWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with request contexts
     - GET /v4/persons/{person_id}/request-contexts

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "country" : {
    "name" : "name",
    "iso_code" : "iso_code"
  },
  "device_id" : "device_id",
  "city" : {
    "name" : "name"
  },
  "ip" : "ip",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "location" : {
    "latitude" : 0.8008281904610115,
    "longitude" : 6.027456183070403
  },
  "state" : {
    "name" : "name",
    "iso_code" : "iso_code"
  }
}, {
  "country" : {
    "name" : "name",
    "iso_code" : "iso_code"
  },
  "device_id" : "device_id",
  "city" : {
    "name" : "name"
  },
  "ip" : "ip",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "location" : {
    "latitude" : 0.8008281904610115,
    "longitude" : 6.027456183070403
  },
  "state" : {
    "name" : "name",
    "iso_code" : "iso_code"
  }
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[RequestContextResponse]> 
     */
    open class func getRequestContextsWithRequestBuilder(personId: String) -> RequestBuilder<[RequestContextResponse]> {
        var path = "/v4/persons/{person_id}/request-contexts"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RequestContextResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with rewards

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter programLabel: (query) Optional program label filter. (optional)
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter rewardState: (query) Optional reward states list filter separated by comma, one of earned, fulfilled, sent, redeemed, failed, canceled, revoked. (optional)
     - parameter rewardType: (query) Optional reward types list filter separated by comma, one of manual_coupon, salesforce_coupon, tango_v2, custom_reward, paypal_payouts. (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRewards(personId: String, programLabel: String? = nil, campaignId: String? = nil, rewardState: String? = nil, rewardType: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonRewardResponse]?,_ error: Error?) -> Void)) {
        getRewardsWithRequestBuilder(personId: personId, programLabel: programLabel, campaignId: campaignId, rewardState: rewardState, rewardType: rewardType, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with rewards
     - GET /v4/persons/{person_id}/rewards

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "reward_supplier_id" : "reward_supplier_id",
  "amount" : "amount",
  "partner_reward_id" : "partner_reward_id",
  "data" : {
    "key" : "data"
  },
  "expiry_date" : "2000-01-23T04:56:07.000+00:00",
  "sandbox" : "sandbox",
  "face_value_type" : "face_value_type",
  "program_label" : "program_label",
  "face_value" : "face_value",
  "tags" : [ "tags", "tags" ],
  "date_earned" : "2000-01-23T04:56:07.000+00:00",
  "slots" : [ "slots", "slots" ],
  "partner_reward_supplier_id" : "partner_reward_supplier_id",
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "reward_name" : "reward_name",
  "reward_id" : "reward_id",
  "id" : "id",
  "state" : "state",
  "campaign_id" : "campaign_id",
  "value_of_rewarded_event" : 0.8008281904610115
}, {
  "reward_supplier_id" : "reward_supplier_id",
  "amount" : "amount",
  "partner_reward_id" : "partner_reward_id",
  "data" : {
    "key" : "data"
  },
  "expiry_date" : "2000-01-23T04:56:07.000+00:00",
  "sandbox" : "sandbox",
  "face_value_type" : "face_value_type",
  "program_label" : "program_label",
  "face_value" : "face_value",
  "tags" : [ "tags", "tags" ],
  "date_earned" : "2000-01-23T04:56:07.000+00:00",
  "slots" : [ "slots", "slots" ],
  "partner_reward_supplier_id" : "partner_reward_supplier_id",
  "date_issued" : "2000-01-23T04:56:07.000+00:00",
  "reward_name" : "reward_name",
  "reward_id" : "reward_id",
  "id" : "id",
  "state" : "state",
  "campaign_id" : "campaign_id",
  "value_of_rewarded_event" : 0.8008281904610115
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter programLabel: (query) Optional program label filter. (optional)
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter rewardState: (query) Optional reward states list filter separated by comma, one of earned, fulfilled, sent, redeemed, failed, canceled, revoked. (optional)
     - parameter rewardType: (query) Optional reward types list filter separated by comma, one of manual_coupon, salesforce_coupon, tango_v2, custom_reward, paypal_payouts. (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)

     - returns: RequestBuilder<[PersonRewardResponse]> 
     */
    open class func getRewardsWithRequestBuilder(personId: String, programLabel: String? = nil, campaignId: String? = nil, rewardState: String? = nil, rewardType: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonRewardResponse]> {
        var path = "/v4/persons/{person_id}/rewards"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "program_label": programLabel, 
                        "campaign_id": campaignId, 
                        "reward_state": rewardState, 
                        "reward_type": rewardType, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonRewardResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a shareable

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter code: (path) Shareable code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShareableByCode(personId: String, code: String, completion: @escaping ((_ data: PersonShareableResponse?,_ error: Error?) -> Void)) {
        getShareableByCodeWithRequestBuilder(personId: personId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a shareable
     - GET /v4/persons/{person_id}/shareables/{code}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter code: (path) Shareable code 

     - returns: RequestBuilder<PersonShareableResponse> 
     */
    open class func getShareableByCodeWithRequestBuilder(personId: String, code: String) -> RequestBuilder<PersonShareableResponse> {
        var path = "/v4/persons/{person_id}/shareables/{code}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonShareableResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with shareables

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShareables(personId: String, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonShareableResponse]?,_ error: Error?) -> Void)) {
        getShareablesWithRequestBuilder(personId: personId, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with shareables
     - GET /v4/persons/{person_id}/shareables

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
}, {
  "code" : "code",
  "data" : {
    "key" : "data"
  },
  "link" : "link",
  "label" : "label",
  "key" : "key",
  "content" : {
    "partner_content_id" : "partner_content_id",
    "image_url" : "image_url",
    "description" : "description",
    "title" : "title",
    "url" : "url"
  },
  "person_id" : "person_id"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)

     - returns: RequestBuilder<[PersonShareableResponse]> 
     */
    open class func getShareablesWithRequestBuilder(personId: String, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonShareableResponse]> {
        var path = "/v4/persons/{person_id}/shareables"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonShareableResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with shares

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter partnerShareId: (query) Optional partner share id filter. (optional)
     - parameter partnerId: (query) Optional partner id filter, using this format: &lt;name&gt;:&lt;value&gt; (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShares(personId: String, campaignId: String? = nil, partnerShareId: String? = nil, partnerId: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonShareResponse]?,_ error: Error?) -> Void)) {
        getSharesWithRequestBuilder(personId: personId, campaignId: campaignId, partnerShareId: partnerShareId, partnerId: partnerId, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with shares
     - GET /v4/persons/{person_id}/shares

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "share_id" : "share_id",
  "shareable_id" : "shareable_id",
  "partner_id" : {
    "name" : "name",
    "value" : "value"
  },
  "data" : {
    "key" : "data"
  },
  "friend_person_id" : "friend_person_id",
  "channel" : "channel",
  "share_date" : "2000-01-23T04:56:07.000+00:00",
  "recipient" : "recipient",
  "link" : "link",
  "message" : "message"
}, {
  "share_id" : "share_id",
  "shareable_id" : "shareable_id",
  "partner_id" : {
    "name" : "name",
    "value" : "value"
  },
  "data" : {
    "key" : "data"
  },
  "friend_person_id" : "friend_person_id",
  "channel" : "channel",
  "share_date" : "2000-01-23T04:56:07.000+00:00",
  "recipient" : "recipient",
  "link" : "link",
  "message" : "message"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter campaignId: (query) Optional campaign id filter. (optional)
     - parameter partnerShareId: (query) Optional partner share id filter. (optional)
     - parameter partnerId: (query) Optional partner id filter, using this format: &lt;name&gt;:&lt;value&gt; (optional)
     - parameter offset: (query) Optional offset filter, defaults to 0. (optional)
     - parameter limit: (query) Optional limit filter, defaults to 100. (optional)

     - returns: RequestBuilder<[PersonShareResponse]> 
     */
    open class func getSharesWithRequestBuilder(personId: String, campaignId: String? = nil, partnerShareId: String? = nil, partnerId: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonShareResponse]> {
        var path = "/v4/persons/{person_id}/shares"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "campaign_id": campaignId, 
                        "partner_share_id": partnerShareId, 
                        "partner_id": partnerId, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonShareResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets calculated statistics for a Person

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStats(personId: String, container: String? = nil, completion: @escaping ((_ data: PersonStatsResponse?,_ error: Error?) -> Void)) {
        getStatsWithRequestBuilder(personId: personId, container: container).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets calculated statistics for a Person
     - GET /v4/persons/{person_id}/stats
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "conversions" : 1,
  "activities" : 0,
  "aov" : "aov",
  "transactions" : 6,
  "ltv" : "ltv"
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter container: (query) Optional container filter, defaults to production container. Pass \&quot;*\&quot; to include steps for all containers (optional)

     - returns: RequestBuilder<PersonStatsResponse> 
     */
    open class func getStatsWithRequestBuilder(personId: String, container: String? = nil) -> RequestBuilder<PersonStatsResponse> {
        var path = "/v4/persons/{person_id}/stats"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "container": container
        ])


        let requestBuilder: RequestBuilder<PersonStatsResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list with steps

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)
     - parameter container: (query)  (optional)
     - parameter campaignId: (query)  (optional)
     - parameter programLabel: (query)  (optional)
     - parameter partnerId: (query)  (optional)
     - parameter flowPath: (query)  (optional)
     - parameter visitType: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSteps(personId: String, name: String? = nil, container: String? = nil, campaignId: String? = nil, programLabel: String? = nil, partnerId: String? = nil, flowPath: String? = nil, visitType: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PersonStepResponse]?,_ error: Error?) -> Void)) {
        getStepsWithRequestBuilder(personId: personId, name: name, container: container, campaignId: campaignId, programLabel: programLabel, partnerId: partnerId, flowPath: flowPath, visitType: visitType, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list with steps
     - GET /v4/persons/{person_id}/steps

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "container" : "container",
  "event_id" : "event_id",
  "partner_event_id" : {
    "name" : "name",
    "value" : "value"
  },
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "step_name" : "step_name",
  "event_date" : "2000-01-23T04:56:07.000+00:00",
  "program_label" : "program_label",
  "id" : "id",
  "value" : "value",
  "campaign_id" : "campaign_id",
  "quality" : "HIGH"
}, {
  "container" : "container",
  "event_id" : "event_id",
  "partner_event_id" : {
    "name" : "name",
    "value" : "value"
  },
  "data" : [ {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  }, {
    "scope" : "PUBLIC",
    "name" : "name",
    "value" : { }
  } ],
  "step_name" : "step_name",
  "event_date" : "2000-01-23T04:56:07.000+00:00",
  "program_label" : "program_label",
  "id" : "id",
  "value" : "value",
  "campaign_id" : "campaign_id",
  "quality" : "HIGH"
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)
     - parameter container: (query)  (optional)
     - parameter campaignId: (query)  (optional)
     - parameter programLabel: (query)  (optional)
     - parameter partnerId: (query)  (optional)
     - parameter flowPath: (query)  (optional)
     - parameter visitType: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[PersonStepResponse]> 
     */
    open class func getStepsWithRequestBuilder(personId: String, name: String? = nil, container: String? = nil, campaignId: String? = nil, programLabel: String? = nil, partnerId: String? = nil, flowPath: String? = nil, visitType: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PersonStepResponse]> {
        var path = "/v4/persons/{person_id}/steps"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{person_id}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "container": container, 
                        "campaign_id": campaignId, 
                        "program_label": programLabel, 
                        "partner_id": partnerId, 
                        "flow_path": flowPath, 
                        "visit_type": visitType, 
                        "offset": offset?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[PersonStepResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
