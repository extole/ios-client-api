//
// V4clientsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V4clientsAPI {
    /**
     Returns a client

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clients(completion: @escaping ((_ data: [ClientResponse]?,_ error: Error?) -> Void)) {
        clientsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a client
     - GET /v4/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "pod" : "pod",
  "name" : "name",
  "core_settings" : {
    "core_version" : "core_version"
  },
  "short_name" : "short_name",
  "client_type" : "CUSTOMER",
  "version" : 0,
  "client_id" : "client_id"
}, {
  "pod" : "pod",
  "name" : "name",
  "core_settings" : {
    "core_version" : "core_version"
  },
  "short_name" : "short_name",
  "client_type" : "CUSTOMER",
  "version" : 0,
  "client_id" : "client_id"
} ]}]

     - returns: RequestBuilder<[ClientResponse]> 
     */
    open class func clientsWithRequestBuilder() -> RequestBuilder<[ClientResponse]> {
        let path = "/v4/clients"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ClientResponse]>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a new client

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: ClientCreationRequest, completion: @escaping ((_ data: ClientResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a new client
     - POST /v4/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "pod" : "pod",
  "name" : "name",
  "core_settings" : {
    "core_version" : "core_version"
  },
  "short_name" : "short_name",
  "client_type" : "CUSTOMER",
  "version" : 0,
  "client_id" : "client_id"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ClientResponse> 
     */
    open class func createWithRequestBuilder(body: ClientCreationRequest) -> RequestBuilder<ClientResponse> {
        let path = "/v4/clients"
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ClientResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Used to update client

     - parameter body: (body)  
     - parameter clientId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: ClientUpdateRequest, clientId: String, completion: @escaping ((_ data: ClientResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, clientId: clientId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Used to update client
     - PUT /v4/clients/{clientId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "pod" : "pod",
  "name" : "name",
  "core_settings" : {
    "core_version" : "core_version"
  },
  "short_name" : "short_name",
  "client_type" : "CUSTOMER",
  "version" : 0,
  "client_id" : "client_id"
}}]
     - parameter body: (body)  
     - parameter clientId: (path)  

     - returns: RequestBuilder<ClientResponse> 
     */
    open class func updateWithRequestBuilder(body: ClientUpdateRequest, clientId: String) -> RequestBuilder<ClientResponse> {
        var path = "/v4/clients/{clientId}"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleClientAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ClientResponse>.Type = ExtoleClientAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
