//
// CampaignControllerTriggerHasPriorRewardResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct CampaignControllerTriggerHasPriorRewardResponse: Codable {

    public enum TriggerType: String, Codable { 
        case share = "SHARE"
        case purchase = "PURCHASE"
        case event = "EVENT"
        case score = "SCORE"
        case zoneState = "ZONE_STATE"
        case apiVersion = "API_VERSION"
        case referredByEvent = "REFERRED_BY_EVENT"
        case legacyQuality = "LEGACY_QUALITY"
        case expression = "EXPRESSION"
        case access = "ACCESS"
        case dataIntelligenceEvent = "DATA_INTELLIGENCE_EVENT"
        case hasPriorStep = "HAS_PRIOR_STEP"
        case maxmind = "MAXMIND"
        case rewardEvent = "REWARD_EVENT"
        case hasPriorReward = "HAS_PRIOR_REWARD"
    }
    public var triggerId: String?
    public var triggerType: TriggerType?
    public var triggerPhase: BuildtimeEvaluatableControllerBuildtimeContextCampaignControllerTriggerPhase?
    public var triggerName: BuildtimeEvaluatableControllerBuildtimeContextString?
    public var componentReferences: [CampaignComponentReferenceResponse]?
    public var filterNames: BuildtimeEvaluatableControllerBuildtimeContextSetString?
    public var filterScope: BuildtimeEvaluatableControllerBuildtimeContextFilterScope?
    public var filterSlots: BuildtimeEvaluatableControllerBuildtimeContextSetString?
    public var filterMinAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration?
    public var filterMaxAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration?
    public var filterMinDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime?
    public var filterMaxDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime?
    public var filterRewardSupplierIds: BuildtimeEvaluatableControllerBuildtimeContextSetIdObject?
    public var filterFaceValueTypes: BuildtimeEvaluatableControllerBuildtimeContextSetFaceValueType?
    public var filterStates: BuildtimeEvaluatableControllerBuildtimeContextSetRewardState?
    public var filterExpressions: [String]?
    public var filterExpression: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorRewardTriggerContextBoolean?
    public var sumOfFaceValueMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal?
    public var sumOfFaceValueMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal?
    public var countMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger?
    public var countMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger?
    public var countMatches: BuildtimeEvaluatableControllerBuildtimeContextSetInteger?

    public init(triggerId: String? = nil, triggerType: TriggerType? = nil, triggerPhase: BuildtimeEvaluatableControllerBuildtimeContextCampaignControllerTriggerPhase? = nil, triggerName: BuildtimeEvaluatableControllerBuildtimeContextString? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil, filterNames: BuildtimeEvaluatableControllerBuildtimeContextSetString? = nil, filterScope: BuildtimeEvaluatableControllerBuildtimeContextFilterScope? = nil, filterSlots: BuildtimeEvaluatableControllerBuildtimeContextSetString? = nil, filterMinAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration? = nil, filterMaxAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration? = nil, filterMinDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime? = nil, filterMaxDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime? = nil, filterRewardSupplierIds: BuildtimeEvaluatableControllerBuildtimeContextSetIdObject? = nil, filterFaceValueTypes: BuildtimeEvaluatableControllerBuildtimeContextSetFaceValueType? = nil, filterStates: BuildtimeEvaluatableControllerBuildtimeContextSetRewardState? = nil, filterExpressions: [String]? = nil, filterExpression: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorRewardTriggerContextBoolean? = nil, sumOfFaceValueMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal? = nil, sumOfFaceValueMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal? = nil, countMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger? = nil, countMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger? = nil, countMatches: BuildtimeEvaluatableControllerBuildtimeContextSetInteger? = nil) {
        self.triggerId = triggerId
        self.triggerType = triggerType
        self.triggerPhase = triggerPhase
        self.triggerName = triggerName
        self.componentReferences = componentReferences
        self.filterNames = filterNames
        self.filterScope = filterScope
        self.filterSlots = filterSlots
        self.filterMinAge = filterMinAge
        self.filterMaxAge = filterMaxAge
        self.filterMinDate = filterMinDate
        self.filterMaxDate = filterMaxDate
        self.filterRewardSupplierIds = filterRewardSupplierIds
        self.filterFaceValueTypes = filterFaceValueTypes
        self.filterStates = filterStates
        self.filterExpressions = filterExpressions
        self.filterExpression = filterExpression
        self.sumOfFaceValueMax = sumOfFaceValueMax
        self.sumOfFaceValueMin = sumOfFaceValueMin
        self.countMax = countMax
        self.countMin = countMin
        self.countMatches = countMatches
    }

    public enum CodingKeys: String, CodingKey { 
        case triggerId = "trigger_id"
        case triggerType = "trigger_type"
        case triggerPhase = "trigger_phase"
        case triggerName = "trigger_name"
        case componentReferences = "component_references"
        case filterNames = "filter_names"
        case filterScope = "filter_scope"
        case filterSlots = "filter_slots"
        case filterMinAge = "filter_min_age"
        case filterMaxAge = "filter_max_age"
        case filterMinDate = "filter_min_date"
        case filterMaxDate = "filter_max_date"
        case filterRewardSupplierIds = "filter_reward_supplier_ids"
        case filterFaceValueTypes = "filter_face_value_types"
        case filterStates = "filter_states"
        case filterExpressions = "filter_expressions"
        case filterExpression = "filter_expression"
        case sumOfFaceValueMax = "sum_of_face_value_max"
        case sumOfFaceValueMin = "sum_of_face_value_min"
        case countMax = "count_max"
        case countMin = "count_min"
        case countMatches = "count_matches"
    }

}
