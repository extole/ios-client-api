//
// CampaignControllerResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct CampaignControllerResponse: Codable {

    public var controllerId: String?
    public var name: BuildtimeEvaluatableCampaignBuildtimeContextString?
    public var enabled: BuildtimeEvaluatableCampaignBuildtimeContextBoolean?
    public var enabledOnStates: BuildtimeEvaluatableCampaignBuildtimeContextSetState?
    public var experienceTypes: BuildtimeEvaluatableCampaignBuildtimeContextSetCampaignExperienceType?
    public var selectors: BuildtimeEvaluatableCampaignBuildtimeContextListCampaignControllerSelectorType?
    public var triggers: [CampaignControllerTriggerResponse]?
    public var actions: [CampaignControllerActionResponse]?
    public var aliases: BuildtimeEvaluatableCampaignBuildtimeContextSetString?
    public var partnerIdName: BuildtimeEvaluatableCampaignBuildtimeContextOptionalString?
    public var data: [StepDataResponse]?
    public var value: String?
    public var componentReferences: [CampaignComponentReferenceResponse]?

    public init(controllerId: String? = nil, name: BuildtimeEvaluatableCampaignBuildtimeContextString? = nil, enabled: BuildtimeEvaluatableCampaignBuildtimeContextBoolean? = nil, enabledOnStates: BuildtimeEvaluatableCampaignBuildtimeContextSetState? = nil, experienceTypes: BuildtimeEvaluatableCampaignBuildtimeContextSetCampaignExperienceType? = nil, selectors: BuildtimeEvaluatableCampaignBuildtimeContextListCampaignControllerSelectorType? = nil, triggers: [CampaignControllerTriggerResponse]? = nil, actions: [CampaignControllerActionResponse]? = nil, aliases: BuildtimeEvaluatableCampaignBuildtimeContextSetString? = nil, partnerIdName: BuildtimeEvaluatableCampaignBuildtimeContextOptionalString? = nil, data: [StepDataResponse]? = nil, value: String? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil) {
        self.controllerId = controllerId
        self.name = name
        self.enabled = enabled
        self.enabledOnStates = enabledOnStates
        self.experienceTypes = experienceTypes
        self.selectors = selectors
        self.triggers = triggers
        self.actions = actions
        self.aliases = aliases
        self.partnerIdName = partnerIdName
        self.data = data
        self.value = value
        self.componentReferences = componentReferences
    }

    public enum CodingKeys: String, CodingKey { 
        case controllerId = "controller_id"
        case name
        case enabled
        case enabledOnStates = "enabled_on_states"
        case experienceTypes = "experience_types"
        case selectors
        case triggers
        case actions
        case aliases
        case partnerIdName = "partner_id_name"
        case data
        case value
        case componentReferences = "component_references"
    }

}
