//
// BuiltCampaignControllerTriggerHasPriorRewardResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BuiltCampaignControllerTriggerHasPriorRewardResponse: Codable {

    public enum TriggerType: String, Codable { 
        case share = "SHARE"
        case purchase = "PURCHASE"
        case event = "EVENT"
        case score = "SCORE"
        case zoneState = "ZONE_STATE"
        case apiVersion = "API_VERSION"
        case referredByEvent = "REFERRED_BY_EVENT"
        case legacyQuality = "LEGACY_QUALITY"
        case expression = "EXPRESSION"
        case access = "ACCESS"
        case dataIntelligenceEvent = "DATA_INTELLIGENCE_EVENT"
        case hasPriorStep = "HAS_PRIOR_STEP"
        case maxmind = "MAXMIND"
        case rewardEvent = "REWARD_EVENT"
        case hasPriorReward = "HAS_PRIOR_REWARD"
    }
    public enum TriggerPhase: String, Codable { 
        case matching = "MATCHING"
        case qualifying = "QUALIFYING"
        case quality = "QUALITY"
    }
    public enum FilterScope: String, Codable { 
        case client = "CLIENT"
        case program = "PROGRAM"
        case campaign = "CAMPAIGN"
        case attributed = "ATTRIBUTED"
    }
    public enum FilterFaceValueTypes: String, Codable { 
        case percentOff = "PERCENT_OFF"
        case points = "POINTS"
        case usd = "USD"
        case gbp = "GBP"
        case eur = "EUR"
        case jpy = "JPY"
        case cny = "CNY"
        case cad = "CAD"
        case aud = "AUD"
        case brl = "BRL"
        case inr = "INR"
        case nzd = "NZD"
    }
    public enum FilterStates: String, Codable { 
        case earned = "EARNED"
        case fulfilled = "FULFILLED"
        case sent = "SENT"
        case redeemed = "REDEEMED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        case revoked = "REVOKED"
    }
    public var triggerId: String?
    public var triggerType: TriggerType?
    public var triggerPhase: TriggerPhase?
    public var triggerName: String?
    public var componentReferences: [CampaignComponentReferenceResponse]?
    public var filterNames: [String]?
    public var filterScope: FilterScope?
    public var filterSlots: [String]?
    public var filterMinAge: BuiltCampaignControllerTriggerHasPriorRewardResponseFilterMinAge?
    public var filterMaxAge: BuiltCampaignControllerTriggerHasPriorRewardResponseFilterMinAge?
    public var filterMinDate: Date?
    public var filterMaxDate: Date?
    public var filterRewardSupplierIds: [String]?
    public var filterFaceValueTypes: [FilterFaceValueTypes]?
    public var filterStates: [FilterStates]?
    public var filterExpressions: [String]?
    public var sumOfFaceValueMax: Decimal?
    public var sumOfFaceValueMin: Decimal?
    public var countMax: Int?
    public var countMin: Int?
    public var countMatches: [Int]?

    public init(triggerId: String? = nil, triggerType: TriggerType? = nil, triggerPhase: TriggerPhase? = nil, triggerName: String? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil, filterNames: [String]? = nil, filterScope: FilterScope? = nil, filterSlots: [String]? = nil, filterMinAge: BuiltCampaignControllerTriggerHasPriorRewardResponseFilterMinAge? = nil, filterMaxAge: BuiltCampaignControllerTriggerHasPriorRewardResponseFilterMinAge? = nil, filterMinDate: Date? = nil, filterMaxDate: Date? = nil, filterRewardSupplierIds: [String]? = nil, filterFaceValueTypes: [FilterFaceValueTypes]? = nil, filterStates: [FilterStates]? = nil, filterExpressions: [String]? = nil, sumOfFaceValueMax: Decimal? = nil, sumOfFaceValueMin: Decimal? = nil, countMax: Int? = nil, countMin: Int? = nil, countMatches: [Int]? = nil) {
        self.triggerId = triggerId
        self.triggerType = triggerType
        self.triggerPhase = triggerPhase
        self.triggerName = triggerName
        self.componentReferences = componentReferences
        self.filterNames = filterNames
        self.filterScope = filterScope
        self.filterSlots = filterSlots
        self.filterMinAge = filterMinAge
        self.filterMaxAge = filterMaxAge
        self.filterMinDate = filterMinDate
        self.filterMaxDate = filterMaxDate
        self.filterRewardSupplierIds = filterRewardSupplierIds
        self.filterFaceValueTypes = filterFaceValueTypes
        self.filterStates = filterStates
        self.filterExpressions = filterExpressions
        self.sumOfFaceValueMax = sumOfFaceValueMax
        self.sumOfFaceValueMin = sumOfFaceValueMin
        self.countMax = countMax
        self.countMin = countMin
        self.countMatches = countMatches
    }

    public enum CodingKeys: String, CodingKey { 
        case triggerId = "trigger_id"
        case triggerType = "trigger_type"
        case triggerPhase = "trigger_phase"
        case triggerName = "trigger_name"
        case componentReferences = "component_references"
        case filterNames = "filter_names"
        case filterScope = "filter_scope"
        case filterSlots = "filter_slots"
        case filterMinAge = "filter_min_age"
        case filterMaxAge = "filter_max_age"
        case filterMinDate = "filter_min_date"
        case filterMaxDate = "filter_max_date"
        case filterRewardSupplierIds = "filter_reward_supplier_ids"
        case filterFaceValueTypes = "filter_face_value_types"
        case filterStates = "filter_states"
        case filterExpressions = "filter_expressions"
        case sumOfFaceValueMax = "sum_of_face_value_max"
        case sumOfFaceValueMin = "sum_of_face_value_min"
        case countMax = "count_max"
        case countMin = "count_min"
        case countMatches = "count_matches"
    }

}
