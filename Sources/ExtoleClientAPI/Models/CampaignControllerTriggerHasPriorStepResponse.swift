//
// CampaignControllerTriggerHasPriorStepResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct CampaignControllerTriggerHasPriorStepResponse: Codable {

    public enum TriggerType: String, Codable { 
        case share = "SHARE"
        case purchase = "PURCHASE"
        case event = "EVENT"
        case score = "SCORE"
        case zoneState = "ZONE_STATE"
        case apiVersion = "API_VERSION"
        case referredByEvent = "REFERRED_BY_EVENT"
        case legacyQuality = "LEGACY_QUALITY"
        case expression = "EXPRESSION"
        case access = "ACCESS"
        case dataIntelligenceEvent = "DATA_INTELLIGENCE_EVENT"
        case hasPriorStep = "HAS_PRIOR_STEP"
        case maxmind = "MAXMIND"
        case rewardEvent = "REWARD_EVENT"
        case hasPriorReward = "HAS_PRIOR_REWARD"
    }
    public enum FilterMatchingPartnerEventId: String, Codable { 
        case disabled = "DISABLED"
        case matchAny = "MATCH_ANY"
    }
    public var triggerId: String?
    public var triggerType: TriggerType?
    public var triggerPhase: BuildtimeEvaluatableControllerBuildtimeContextCampaignControllerTriggerPhase?
    public var triggerName: BuildtimeEvaluatableControllerBuildtimeContextString?
    public var componentReferences: [CampaignComponentReferenceResponse]?
    public var filterNames: BuildtimeEvaluatableControllerBuildtimeContextSetString?
    public var filterScope: BuildtimeEvaluatableControllerBuildtimeContextFilterScope?
    public var filterPartnerEventIdName: String?
    public var filterPartnerEventIdValue: String?
    public var filterPartnerEventId: BuildtimeEvaluatableControllerBuildtimeContextOptionalPartnerEventId?
    public var filterMatchingPartnerEventId: FilterMatchingPartnerEventId?
    public var filterMinAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration?
    public var filterMaxAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration?
    public var filterMinValue: Decimal?
    public var filterMaxValue: Decimal?
    public var filterQuality: BuildtimeEvaluatableControllerBuildtimeContextStepQuality?
    public var filterExpressions: [String]?
    public var filterExpression: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableStepHasPriorStepTriggerContextBoolean?
    public var filterProgramLabel: String?
    public var filterCampaignId: String?
    public var filterProgramLabels: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorStepTriggerContextSetString?
    public var filterCampaignIds: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorStepTriggerContextSetIdObject?
    public var filterMinDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime?
    public var filterMaxDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime?
    public var sumOfValueMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal?
    public var sumOfValueMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal?
    public var countMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger?
    public var countMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger?
    public var countMatches: BuildtimeEvaluatableControllerBuildtimeContextSetInteger?
    public var personId: RuntimeEvaluatableHasPriorStepTriggerContextOptionalIdPerson?

    public init(triggerId: String? = nil, triggerType: TriggerType? = nil, triggerPhase: BuildtimeEvaluatableControllerBuildtimeContextCampaignControllerTriggerPhase? = nil, triggerName: BuildtimeEvaluatableControllerBuildtimeContextString? = nil, componentReferences: [CampaignComponentReferenceResponse]? = nil, filterNames: BuildtimeEvaluatableControllerBuildtimeContextSetString? = nil, filterScope: BuildtimeEvaluatableControllerBuildtimeContextFilterScope? = nil, filterPartnerEventIdName: String? = nil, filterPartnerEventIdValue: String? = nil, filterPartnerEventId: BuildtimeEvaluatableControllerBuildtimeContextOptionalPartnerEventId? = nil, filterMatchingPartnerEventId: FilterMatchingPartnerEventId? = nil, filterMinAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration? = nil, filterMaxAge: BuildtimeEvaluatableControllerBuildtimeContextOptionalDuration? = nil, filterMinValue: Decimal? = nil, filterMaxValue: Decimal? = nil, filterQuality: BuildtimeEvaluatableControllerBuildtimeContextStepQuality? = nil, filterExpressions: [String]? = nil, filterExpression: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableStepHasPriorStepTriggerContextBoolean? = nil, filterProgramLabel: String? = nil, filterCampaignId: String? = nil, filterProgramLabels: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorStepTriggerContextSetString? = nil, filterCampaignIds: BuildtimeEvaluatableControllerBuildtimeContextRuntimeEvaluatableHasPriorStepTriggerContextSetIdObject? = nil, filterMinDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime? = nil, filterMaxDate: BuildtimeEvaluatableControllerBuildtimeContextOptionalZonedDateTime? = nil, sumOfValueMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal? = nil, sumOfValueMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalBigDecimal? = nil, countMin: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger? = nil, countMax: BuildtimeEvaluatableControllerBuildtimeContextOptionalInteger? = nil, countMatches: BuildtimeEvaluatableControllerBuildtimeContextSetInteger? = nil, personId: RuntimeEvaluatableHasPriorStepTriggerContextOptionalIdPerson? = nil) {
        self.triggerId = triggerId
        self.triggerType = triggerType
        self.triggerPhase = triggerPhase
        self.triggerName = triggerName
        self.componentReferences = componentReferences
        self.filterNames = filterNames
        self.filterScope = filterScope
        self.filterPartnerEventIdName = filterPartnerEventIdName
        self.filterPartnerEventIdValue = filterPartnerEventIdValue
        self.filterPartnerEventId = filterPartnerEventId
        self.filterMatchingPartnerEventId = filterMatchingPartnerEventId
        self.filterMinAge = filterMinAge
        self.filterMaxAge = filterMaxAge
        self.filterMinValue = filterMinValue
        self.filterMaxValue = filterMaxValue
        self.filterQuality = filterQuality
        self.filterExpressions = filterExpressions
        self.filterExpression = filterExpression
        self.filterProgramLabel = filterProgramLabel
        self.filterCampaignId = filterCampaignId
        self.filterProgramLabels = filterProgramLabels
        self.filterCampaignIds = filterCampaignIds
        self.filterMinDate = filterMinDate
        self.filterMaxDate = filterMaxDate
        self.sumOfValueMin = sumOfValueMin
        self.sumOfValueMax = sumOfValueMax
        self.countMin = countMin
        self.countMax = countMax
        self.countMatches = countMatches
        self.personId = personId
    }

    public enum CodingKeys: String, CodingKey { 
        case triggerId = "trigger_id"
        case triggerType = "trigger_type"
        case triggerPhase = "trigger_phase"
        case triggerName = "trigger_name"
        case componentReferences = "component_references"
        case filterNames = "filter_names"
        case filterScope = "filter_scope"
        case filterPartnerEventIdName = "filter_partner_event_id_name"
        case filterPartnerEventIdValue = "filter_partner_event_id_value"
        case filterPartnerEventId = "filter_partner_event_id"
        case filterMatchingPartnerEventId = "filter_matching_partner_event_id"
        case filterMinAge = "filter_min_age"
        case filterMaxAge = "filter_max_age"
        case filterMinValue = "filter_min_value"
        case filterMaxValue = "filter_max_value"
        case filterQuality = "filter_quality"
        case filterExpressions = "filter_expressions"
        case filterExpression = "filter_expression"
        case filterProgramLabel = "filter_program_label"
        case filterCampaignId = "filter_campaign_id"
        case filterProgramLabels = "filter_program_labels"
        case filterCampaignIds = "filter_campaign_ids"
        case filterMinDate = "filter_min_date"
        case filterMaxDate = "filter_max_date"
        case sumOfValueMin = "sum_of_value_min"
        case sumOfValueMax = "sum_of_value_max"
        case countMin = "count_min"
        case countMax = "count_max"
        case countMatches = "count_matches"
        case personId = "person_id"
    }

}
